[assembly: System.Reflection.AssemblyMetadata("RepositoryUrl", "https://github.com/ServiceComposer/ServiceComposer.AspNetCore.git")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo("ServiceComposer.AspNetCore.Endpoints.Tests")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo("ServiceComposer.AspNetCore.Tests")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"DynamicProxyGenAssembly2, PublicKey=0024000004800000940000000602000000240000525341310004000001000100c547cac37abd99c8db225ef2f6c8a3602f3b3606cc9891605d02baa56104f4cfc0734aa39b93bf7852f7d9266654753cc297e7d2edfe0bac1cdcf9f717241550e0a7b191195b7667bb4f64bcb8e2121380fd1d9d46ad2d92d2d15605093924cceaf74c4861eff62abf69b9291ed0a340e113be11e6a7d3113e92484cf7045cc7")]
[assembly: System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")]
namespace ServiceComposer.AspNetCore
{
    public class AssemblyScanner
    {
        public System.IO.SearchOption DirectorySearchOptions { get; set; }
        public bool IsEnabled { get; }
        public void AddAssemblyFilter(System.Func<string, ServiceComposer.AspNetCore.AssemblyScanner.FilterResults> filter) { }
        public void Disable() { }
        public enum FilterResults
        {
            Exclude = 0,
            Include = 1,
        }
    }
    public class ComposedRequestIdHeader
    {
        public const string Key = "composed-request-id";
        public ComposedRequestIdHeader() { }
    }
    public static class ComposedRequestIdHeaderExtensions
    {
        [System.Obsolete("AddComposedRequestIdHeader is obsolete, it\'ll be treated as an error starting v2 " +
            "and removed in v3.", false)]
        public static void AddComposedRequestIdHeader(this Microsoft.AspNetCore.Http.IHeaderDictionary headers, string requestId) { }
        [System.Obsolete("AddComposedRequestIdHeader is obsolete, it\'ll be treated as an error starting v2 " +
            "and removed in v3.", false)]
        public static void AddComposedRequestIdHeader(this System.Net.Http.Headers.HttpRequestHeaders headers, string requestId) { }
        [System.Obsolete("GetComposedRequestId is obsolete, it\'ll be treated as an error starting v2 and re" +
            "moved in v3. Use GetCompositionContext().RequestId.", false)]
        public static string GetComposedRequestId(this Microsoft.AspNetCore.Http.IHeaderDictionary headers) { }
        [System.Obsolete("GetComposedRequestIdHeaderOr is obsolete, it\'ll be treated as an error starting v" +
            "2 and removed in v3. Use GetCompositionContext().RequestId.", false)]
        public static string GetComposedRequestIdHeaderOr(this Microsoft.AspNetCore.Http.IHeaderDictionary headers, System.Func<string> defaultValue) { }
    }
    public delegate System.Threading.Tasks.Task CompositionEventHandler<in TEvent>(TEvent @event, Microsoft.AspNetCore.Http.HttpRequest httpRequest);
    public class CompositionHandler
    {
        public CompositionHandler() { }
        [return: System.Runtime.CompilerServices.Dynamic(new bool[] {
                false,
                false,
                true,
                false})]
        [return: System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "ViewModel",
                "StatusCode"})]
        public static System.Threading.Tasks.Task<System.ValueTuple<object, int>> HandleRequest(string requestId, Microsoft.AspNetCore.Http.HttpContext context) { }
    }
    [System.Obsolete("EventHandler<TEvent> is obsoleted and will be treated as an error starting v2 and" +
        " removed in v3. Use attribute routing based composition, and CompositionEventHan" +
        "dler<TEvent>.", false)]
    public delegate System.Threading.Tasks.Task EventHandler<TEvent>(string requestId, [System.Runtime.CompilerServices.Dynamic] object viewModel, TEvent @event, Microsoft.AspNetCore.Routing.RouteData routeData, Microsoft.AspNetCore.Http.HttpRequest httpRequest);
    public interface ICompositionContext
    {
        string RequestId { get; }
        System.Threading.Tasks.Task RaiseEvent(object @event);
    }
    public interface ICompositionErrorsHandler
    {
        System.Threading.Tasks.Task OnRequestError(Microsoft.AspNetCore.Http.HttpRequest request, System.Exception ex);
    }
    public interface ICompositionEventsPublisher
    {
        void Subscribe<TEvent>(ServiceComposer.AspNetCore.CompositionEventHandler<TEvent> handler);
    }
    public interface ICompositionEventsSubscriber
    {
        void Subscribe(ServiceComposer.AspNetCore.ICompositionEventsPublisher publisher);
    }
    public interface ICompositionRequestsHandler
    {
        System.Threading.Tasks.Task Handle(Microsoft.AspNetCore.Http.HttpRequest request);
    }
    [System.Obsolete("IHandleRequests is obsoleted and will be treated as an error starting v2 and remo" +
        "ved in v3. Use attribute routing based composition and ICompositionRequestsHandl" +
        "er.", false)]
    public interface IHandleRequests : ServiceComposer.AspNetCore.IInterceptRoutes
    {
        System.Threading.Tasks.Task Handle(string requestId, [System.Runtime.CompilerServices.Dynamic] object vm, Microsoft.AspNetCore.Routing.RouteData routeData, Microsoft.AspNetCore.Http.HttpRequest request);
    }
    [System.Obsolete("IHandleRequestsErrors is obsoleted and will be treated as an error starting v2 an" +
        "d removed in v3. Use attribute routing based composition and ICompositionErrorsH" +
        "andler.", false)]
    public interface IHandleRequestsErrors : ServiceComposer.AspNetCore.IInterceptRoutes
    {
        System.Threading.Tasks.Task OnRequestError(string requestId, System.Exception ex, [System.Runtime.CompilerServices.Dynamic] object vm, Microsoft.AspNetCore.Routing.RouteData routeData, Microsoft.AspNetCore.Http.HttpRequest request);
    }
    [System.Obsolete("IInterceptRoutes is obsoleted and will be treated as an error starting v2 and rem" +
        "oved in v3. Use attribute routing based composition.", false)]
    public interface IInterceptRoutes
    {
        bool Matches(Microsoft.AspNetCore.Routing.RouteData routeData, string httpVerb, Microsoft.AspNetCore.Http.HttpRequest request);
    }
    [System.Obsolete("IPublishCompositionEvents is obsoleted and will be treated as an error starting v" +
        "2 and removed in v3. Use attribute routing based composition and ICompositionEve" +
        "ntsPublisher.", false)]
    public interface IPublishCompositionEvents
    {
        void Subscribe<TEvent>(ServiceComposer.AspNetCore.EventHandler<TEvent> handler);
    }
    [System.Obsolete("ISubscribeToCompositionEvents is obsoleted and will be treated as an error starti" +
        "ng v2 and removed in v3. Use attribute routing based composition and ICompositio" +
        "nEventsSubscriber.", false)]
    public interface ISubscribeToCompositionEvents : ServiceComposer.AspNetCore.IInterceptRoutes
    {
        void Subscribe(ServiceComposer.AspNetCore.IPublishCompositionEvents publisher);
    }
    public interface IViewModelCompositionOptionsCustomization
    {
        void Customize(ServiceComposer.AspNetCore.ViewModelCompositionOptions options);
    }
    public static class ServiceCollectionExtensions
    {
        public static void AddViewModelComposition(this Microsoft.Extensions.DependencyInjection.IServiceCollection services) { }
        public static void AddViewModelComposition(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, System.Action<ServiceComposer.AspNetCore.ViewModelCompositionOptions> config) { }
    }
    public class ViewModelCompositionOptions
    {
        public ServiceComposer.AspNetCore.AssemblyScanner AssemblyScanner { get; }
        public Microsoft.Extensions.DependencyInjection.IServiceCollection Services { get; }
        public void AddServicesConfigurationHandler(System.Type serviceType, System.Action<System.Type, Microsoft.Extensions.DependencyInjection.IServiceCollection> configurationHandler) { }
        public void AddTypesRegistrationHandler(System.Func<System.Type, bool> typesFilter, System.Action<System.Collections.Generic.IEnumerable<System.Type>> registrationHandler) { }
        public void RegisterCompositionEventsSubscriber<T>()
            where T : ServiceComposer.AspNetCore.ISubscribeToCompositionEvents { }
        public void RegisterCompositionHandler<T>() { }
        public void RegisterRequestsHandler<T>()
            where T : ServiceComposer.AspNetCore.IHandleRequests { }
    }
}
namespace ServiceComposer.AspNetCore.Gateway
{
    public static class ApplicationBuilderExtensions
    {
        [System.Obsolete("CompositionGateway is obsoleted and will be treated as an error starting v2 and r" +
            "emoved in v3. Use attribute routing based composition, MapCompositionHandlers, a" +
            "nd MVC Endpoints.", false)]
        public static void RunCompositionGateway(this Microsoft.AspNetCore.Builder.IApplicationBuilder app, System.Action<Microsoft.AspNetCore.Routing.IRouteBuilder> routes = null) { }
        [System.Obsolete("CompositionGateway is obsoleted and will be treated as an error starting v2 and r" +
            "emoved in v3. Use attribute routing based composition, MapCompositionHandlers, a" +
            "nd MVC Endpoints.", false)]
        public static void RunCompositionGatewayWithDefaultRoutes(this Microsoft.AspNetCore.Builder.IApplicationBuilder app) { }
    }
    public static class Composition
    {
        [System.Obsolete("HandleRequest is obsoleted and will be treated as an error starting v2 and remove" +
            "d in v3. Use attribute routing based composition, MapCompositionHandlers, and MV" +
            "C Endpoints.", false)]
        public static System.Threading.Tasks.Task HandleRequest(Microsoft.AspNetCore.Http.HttpContext context) { }
    }
    public static class RouteBuilderExtentions
    {
        [System.Obsolete("MapComposableDelete is obsoleted and will be treated as an error starting v2 and " +
            "removed in v3. Use attribute routing based composition, MapCompositionHandlers, " +
            "and MVC Endpoints.", false)]
        public static Microsoft.AspNetCore.Routing.IRouteBuilder MapComposableDelete(this Microsoft.AspNetCore.Routing.IRouteBuilder routeBuilder, string template, Microsoft.AspNetCore.Routing.RouteValueDictionary defaults = null, Microsoft.AspNetCore.Routing.RouteValueDictionary dataTokens = null) { }
        [System.Obsolete("MapComposableGet is obsoleted and will be treated as an error starting v2 and rem" +
            "oved in v3. Use attribute routing based composition, MapCompositionHandlers, and" +
            " MVC Endpoints.", false)]
        public static Microsoft.AspNetCore.Routing.IRouteBuilder MapComposableGet(this Microsoft.AspNetCore.Routing.IRouteBuilder routeBuilder, string template, Microsoft.AspNetCore.Routing.RouteValueDictionary defaults = null, Microsoft.AspNetCore.Routing.RouteValueDictionary dataTokens = null) { }
        [System.Obsolete("MapComposablePatch is obsoleted and will be treated as an error starting v2 and r" +
            "emoved in v3. Use attribute routing based composition, MapCompositionHandlers, a" +
            "nd MVC Endpoints.", false)]
        public static Microsoft.AspNetCore.Routing.IRouteBuilder MapComposablePatch(this Microsoft.AspNetCore.Routing.IRouteBuilder routeBuilder, string template, Microsoft.AspNetCore.Routing.RouteValueDictionary defaults = null, Microsoft.AspNetCore.Routing.RouteValueDictionary dataTokens = null) { }
        [System.Obsolete("MapComposablePost is obsoleted and will be treated as an error starting v2 and re" +
            "moved in v3. Use attribute routing based composition, MapCompositionHandlers, an" +
            "d MVC Endpoints.", false)]
        public static Microsoft.AspNetCore.Routing.IRouteBuilder MapComposablePost(this Microsoft.AspNetCore.Routing.IRouteBuilder routeBuilder, string template, Microsoft.AspNetCore.Routing.RouteValueDictionary defaults = null, Microsoft.AspNetCore.Routing.RouteValueDictionary dataTokens = null) { }
        [System.Obsolete("MapComposablePut is obsoleted and will be treated as an error starting v2 and rem" +
            "oved in v3. Use attribute routing based composition, MapCompositionHandlers, and" +
            " MVC Endpoints.", false)]
        public static Microsoft.AspNetCore.Routing.IRouteBuilder MapComposablePut(this Microsoft.AspNetCore.Routing.IRouteBuilder routeBuilder, string template, Microsoft.AspNetCore.Routing.RouteValueDictionary defaults = null, Microsoft.AspNetCore.Routing.RouteValueDictionary dataTokens = null) { }
        [System.Obsolete("MapComposableRoute is obsoleted and will be treated as an error starting v2 and r" +
            "emoved in v3. Use attribute routing based composition, MapCompositionHandlers, a" +
            "nd MVC Endpoints.", false)]
        public static Microsoft.AspNetCore.Routing.IRouteBuilder MapComposableRoute(this Microsoft.AspNetCore.Routing.IRouteBuilder routeBuilder, string template, System.Collections.Generic.IDictionary<string, object> constraints, Microsoft.AspNetCore.Routing.RouteValueDictionary defaults = null, Microsoft.AspNetCore.Routing.RouteValueDictionary dataTokens = null) { }
    }
}