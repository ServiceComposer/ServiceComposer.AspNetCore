[assembly: System.Runtime.CompilerServices.InternalsVisibleTo("ServiceComposer.AspNetCore.Tests")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"DynamicProxyGenAssembly2, PublicKey=0024000004800000940000000602000000240000525341310004000001000100c547cac37abd99c8db225ef2f6c8a3602f3b3606cc9891605d02baa56104f4cfc0734aa39b93bf7852f7d9266654753cc297e7d2edfe0bac1cdcf9f717241550e0a7b191195b7667bb4f64bcb8e2121380fd1d9d46ad2d92d2d15605093924cceaf74c4861eff62abf69b9291ed0a340e113be11e6a7d3113e92484cf7045cc7")]
namespace ServiceComposer.AspNetCore
{
    public class AssemblyScanner
    {
        public System.IO.SearchOption DirectorySearchOptions { get; set; }
        public bool IsEnabled { get; }
        public void AddAssemblyFilter(System.Func<string, ServiceComposer.AspNetCore.AssemblyScanner.FilterResults> filter) { }
        public void Disable() { }
        public enum FilterResults
        {
            Exclude = 0,
            Include = 1,
        }
    }
    public sealed class BindModelFromBodyAttribute<T> : ServiceComposer.AspNetCore.ModelAttribute
    {
        public BindModelFromBodyAttribute() { }
        public override string ModelName { get; }
    }
    public sealed class BindModelFromRouteAttribute<T> : ServiceComposer.AspNetCore.ModelAttribute
    {
        public BindModelFromRouteAttribute(string routeValueKey) { }
        public override string ModelName { get; }
    }
    public static class ComposedRequestIdHeader
    {
        public const string Key = "composed-request-id";
    }
    public delegate System.Threading.Tasks.Task CompositionEventHandler<in TEvent>(TEvent @event, Microsoft.AspNetCore.Http.HttpRequest httpRequest);
    public static class CompositionHandler { }
    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Method)]
    public abstract class CompositionRequestFilterAttribute : System.Attribute, ServiceComposer.AspNetCore.ICompositionRequestFilter
    {
        protected CompositionRequestFilterAttribute() { }
        public abstract System.Threading.Tasks.ValueTask<object> InvokeAsync(ServiceComposer.AspNetCore.CompositionRequestFilterContext context, ServiceComposer.AspNetCore.CompositionRequestFilterDelegate next);
    }
    public sealed class CompositionRequestFilterContext
    {
        public Microsoft.AspNetCore.Http.HttpContext HttpContext { get; }
    }
    public delegate System.Threading.Tasks.ValueTask<object> CompositionRequestFilterDelegate(ServiceComposer.AspNetCore.CompositionRequestFilterContext context);
    public static class EndpointsExtensions
    {
        public static Microsoft.AspNetCore.Builder.IEndpointConventionBuilder MapCompositionHandlers(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder endpoints) { }
    }
    public static class HttpRequestExtensions
    {
        [return: System.Runtime.CompilerServices.Dynamic]
        public static object GetComposedResponseModel(this Microsoft.AspNetCore.Http.HttpRequest request) { }
        public static T GetComposedResponseModel<T>(this Microsoft.AspNetCore.Http.HttpRequest request)
            where T :  class { }
        public static ServiceComposer.AspNetCore.ICompositionContext GetCompositionContext(this Microsoft.AspNetCore.Http.HttpRequest request) { }
        public static void SetActionResult(this Microsoft.AspNetCore.Http.HttpRequest request, Microsoft.AspNetCore.Mvc.ActionResult actionResult) { }
    }
    public static class HttpRequestModelBinderExtension
    {
        public static System.Threading.Tasks.Task<T> Bind<T>(this Microsoft.AspNetCore.Http.HttpRequest request)
            where T : new() { }
        [return: System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "Model",
                "IsModelSet",
                "ModelState"})]
        public static System.Threading.Tasks.Task<System.ValueTuple<T, bool, Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary>> TryBind<T>(this Microsoft.AspNetCore.Http.HttpRequest request)
            where T : new() { }
    }
    public interface ICompositionContext
    {
        string RequestId { get; }
        System.Threading.Tasks.Task RaiseEvent<TEvent>(TEvent @event);
    }
    public interface ICompositionErrorsHandler
    {
        System.Threading.Tasks.Task OnRequestError(Microsoft.AspNetCore.Http.HttpRequest request, System.Exception ex);
    }
    public interface ICompositionEventsHandler<in TEvent>
    {
        System.Threading.Tasks.Task Handle(TEvent @event, Microsoft.AspNetCore.Http.HttpRequest request);
    }
    public interface ICompositionEventsPublisher
    {
        void Subscribe<TEvent>(ServiceComposer.AspNetCore.CompositionEventHandler<TEvent> handler);
    }
    public interface ICompositionEventsSubscriber
    {
        void Subscribe(ServiceComposer.AspNetCore.ICompositionEventsPublisher publisher);
    }
    public interface ICompositionRequestFilter
    {
        System.Threading.Tasks.ValueTask<object> InvokeAsync(ServiceComposer.AspNetCore.CompositionRequestFilterContext context, ServiceComposer.AspNetCore.CompositionRequestFilterDelegate next);
    }
    public interface ICompositionRequestFilter<T> : ServiceComposer.AspNetCore.ICompositionRequestFilter { }
    public interface ICompositionRequestsHandler
    {
        System.Threading.Tasks.Task Handle(Microsoft.AspNetCore.Http.HttpRequest request);
    }
    public interface IEndpointScopedViewModelFactory : ServiceComposer.AspNetCore.IViewModelFactory { }
    public interface IViewModelCompositionOptionsCustomization
    {
        void Customize(ServiceComposer.AspNetCore.ViewModelCompositionOptions options);
    }
    public interface IViewModelFactory
    {
        object CreateViewModel(Microsoft.AspNetCore.Http.HttpContext httpContext, ServiceComposer.AspNetCore.ICompositionContext compositionContext);
    }
    public interface IViewModelPreviewHandler
    {
        System.Threading.Tasks.Task Preview(Microsoft.AspNetCore.Http.HttpRequest request);
    }
    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Method, AllowMultiple=true)]
    public abstract class ModelAttribute : System.Attribute
    {
        protected ModelAttribute(System.Type type, Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource bindingSource) { }
        public Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource BindingSource { get; }
        public abstract string ModelName { get; }
        public System.Type Type { get; }
    }
    public enum ResponseCasing
    {
        CamelCase = 0,
        PascalCase = 1,
    }
    public class ResponseSerializationOptions
    {
        public ServiceComposer.AspNetCore.ResponseCasing DefaultResponseCasing { get; set; }
        public bool UseOutputFormatters { get; set; }
        public void UseCustomJsonSerializerSettings(System.Func<Microsoft.AspNetCore.Http.HttpRequest, System.Text.Json.JsonSerializerOptions> jsonSerializerSettingsConfig) { }
    }
    public static class ServiceCollectionExtensions
    {
        public static void AddViewModelComposition(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Microsoft.Extensions.Configuration.IConfiguration configuration = null) { }
        public static void AddViewModelComposition(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, System.Action<ServiceComposer.AspNetCore.ViewModelCompositionOptions> config, Microsoft.Extensions.Configuration.IConfiguration configuration = null) { }
    }
    public class ViewModelCompositionOptions
    {
        public ServiceComposer.AspNetCore.AssemblyScanner AssemblyScanner { get; }
        public Microsoft.Extensions.Configuration.IConfiguration Configuration { get; }
        public ServiceComposer.AspNetCore.ResponseSerializationOptions ResponseSerialization { get; }
        public Microsoft.Extensions.DependencyInjection.IServiceCollection Services { get; }
        public void AddServicesConfigurationHandler(System.Type serviceType, System.Action<System.Type, Microsoft.Extensions.DependencyInjection.IServiceCollection> configurationHandler) { }
        public void AddTypesRegistrationHandler(System.Func<System.Type, bool> typesFilter, System.Action<System.Collections.Generic.IEnumerable<System.Type>> registrationHandler) { }
        public void DisableWriteSupport() { }
        public void EnableCompositionOverControllers(bool useCaseInsensitiveRouteMatching = true) { }
        public void RegisterCompositionHandler<T>() { }
        public void RegisterEndpointScopedViewModelFactory<T>()
            where T : ServiceComposer.AspNetCore.IEndpointScopedViewModelFactory { }
        public void RegisterGlobalViewModelFactory<T>()
            where T : ServiceComposer.AspNetCore.IViewModelFactory { }
    }
}